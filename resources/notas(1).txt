make --> Complia todo lo qu contenga el archivo "makefile" segun el nivel del directorio donde me encuentre en consola

make clean --> Borra todo lo compilado

apalasce7.alumnes@ub052137:~/minikernel_alumno_x86_64$ ./boot/boot minikernel/kernel --> Ejecuta el kernel

> salida.txt Guardamos la salida del programa en un txt para verla mejor

--------------------

1  .c /usuario
2.  MakeFile (usuario)

----------------------------------------------------------------------------------

*Si los permisos estan mal es:
  1. Desde carpeta principal minikernel:
      cd boot
      chmod +x boot

*Crear proceso nuevo de usuario:
1.Fichero en USUARIOS crear llamado nuevo.c con:

#include "servicios.h"

int main() {
  printf("Hola soy el nuevo\n");
  return 0;
}


2.En usuario/lib/init.c

if (crear_proceso("nuevo")<0)
		printf("Error creando nuevo\n"); /* */

3.En usuario/makefile

nuevo.o: $(INCLUDEDIR)/servicios.h
nuevo: nuevo.o $(BIBLIOTECA)
	$(CC) -shared -o $@ nuevo.o -L$(LIBDIR) -lserv 
	
4. Anyadir nuevo En usuario/makefile:

PROGRAMAS=init excep_arit excep_mem simplon nuevo



*Crear llamada de sistema(Esto lo podra usar el usuario para procesos nuevos(lo de antes)):
1. Carpeta minikernel/minikernel/include/kernel.h

  1.1 Creo prototipo:

      int sis_nuevo(); 
      
  1.2 Anyado a tabla de servicios:
      
      servicio tabla_servicios[NSERVICIOS]={	{sis_crear_proceso},
					    {sis_terminar_proceso},
					    {sis_escribir},
					    {sis_nuevo}};		<-- Este

2. Carpeta minikernel/minikernel/include/llamsis.h
    
  2.1 Augmentamos servicios en uno:
      
      #define NSERVICIOS 3    -->  #define NSERVICIOS 4
      
  2.2 Definimos nueva llamada:
  
      #define NUEVO 3/
      
3. Carpeta minikernel/minikernel/kernel.c (Implementamos llamada a sistema)

  int sis_nuevo() {
  printk("Nuevo servicio Funciona correctamente");
  return 57;
  }
  
*Crear llamada a sistema:

1. En usuario/lib/serv.c(Facilitamos al usuario una funcion facil de recordar):

    int nuevo(){
      return llamsis(NUEVO, 0);
    }

2. En usuario/include/servicios.h:

    int nuevo(); <-- Enlazamos funcion
    
3. En usuario/nuevo.c:(modificamos)(para obtener el return de antes (57))

  int main() {
  int res;
  res = nuevo();
  printf("Hola soy el nuevo %d\n", res);
  return 0;
  }

*PARAMETROS:

1. En minikernel/minikernel/kernel.c:

  int sis_nuevo() {
  int param = (int)leer_registro(1); /*leemos registro 1*/
  printk("Nuevo servicio Funciona correctamente %d\n", param);
  return 57;
}
  
2. En minikernel/usuario/lib/serv.c:

   int nuevo(int numero){
  return llamsis(NUEVO, 1, (long)numero);
}
   
3. minikernel/servicios.h:

  int nuevo(int numero); 
  
4. minikenel/usuario/nuevo.c:
  
  int main() {
  int res;
  res = nuevo(1);
  printf(" Hola soy el nuevo %d\n", res);
  return 0;
}

*Modificacion de FIFO:

en kernel.c:

lierar_proceso(){...}